shortcuts: 
	command palatte: ctrl+shift+p
	format documents: shift+alt+f (before doing this add comma after brackets)

What is the Flutter?
-it has two main parts (1) UI Framework  and (2) Collection of tools.
- (1) Code packages & utility functions for writing cross-plateform app code.
- (2) CLI & software that helps with developing, testing & building cross-plateform apps.

- Flutter allows you to build multi-plateform apps based on one single codebase and programming language.
- single codebase (flutter) translates that code to plateform-specific machine code.

- it's a framework for building user interfaces with Dart Language.
- framework is Collection of packages & utility functions you may use in your code.
- Dart is Programming laguage developed by Google, and Main usege: Flutter app development.

- Plateforms supported by Flutter
 - Mobile Apps (iOS) (Android)
 - Web (Morden Browsers)
 - Desktop Application (Windows) (macOS) (Linux)

- Flutter Setup
 (1) Flutter SDK
	- Flutter SDK for managing flutter projects.
	- Git version control software, used internally by Flutter SDK.

(2) Plateform Tools
	- Android Studio Used by Flutter SDK & needed for Android App deployment.
	- XCode Used by Flutter SDK & needed for iOS app deployment.

(3) Virtual Devices
	- Android Preview Flutter apps on virtual Android devices.
	- iOS Preview Flutter apps on virtual iOS devices.

(Visual studio is prersonally recommanded)

Commands:
	- To create Flutter Project : flutter create Project_name

	- To delete the Flutter project: flutter clean

	- To Run Fultter app: flutter run

Understaning Material Design:
	Flutter apps by default use Material design which is Google's flexible design system.
	 A set of suggestions, rules & guidelines that help you build beautiful user interfaces and it is highly customizable and extendable.

Flutter & Dart Fundamentals
	- lib folder contains actual dart files.
	-build folder contains temporary files and output files, which generated by flutter.
	- also there are android, ios, macos, linux, web folders, which are plateform specific, we dont need to change those folder, flutter will change automatically. it used when we put our application on app store or play store etc.
	- test folder, there is also dart file, but here you will not write a code like main application code.
	- also there are other many files and folders like .dart_tool that contains extra configuration for dart tooling. and .idea contains extra configuration for android studio.
	- .gitignore which file used by git for version control.
	- .metadata file which file contains information about internal data and metadat about your project.
	- analysis_options.yaml file which is used to show you errors and warning before you run the app.
	  - first_app.iml file which contains more metadata about the projects.
	- pubspec.yaml file used to add third party packages which you want to used in your flutter project.

-basic Syntax & features
	- the dart language has top-down approch.

	- the dart code first parsed from top to bottom after that, it comiles by dart & flutter tools and then it converts into native iOS or Android machine code which 	os excecuted on the device.

	- main() function gets executed automatically: by dart, when executing the compiled app on the target device.

	- runApp() should be called inside of main() : it tells flutter what to display on the screen.

	- In Dart (and therefore Flutter, since it uses Dart), you have two kinds of parameters you can accept in functions
	(1) Positional: The position of an argument determines which parameter receives the value

		void add(a, b) { // a & b are positional parameters
		  print(a + b); // print() is a built-in function that will be explained later
		}
 
		add(5, 10); // 5 is used as a value for a, because it's the first argument; 10 is used as a value for b

	(2) Named: The name of an argument determines which parameter receives the value

		void add({a, b}) { // a & b are named parameters (because of the curly braces)
		  print(a + b); 
		}  
 
		add(b: 5, a: 10); // 5 is used as a value for b, because it's assigned to that name; 10 is used as a value for a
	
	- runApp(MaterialApp(home: Text("Hello world!")));

	- runApp(...): This function takes a widget (in this case, a MaterialApp widget) and makes it the root of the widget tree, effectively starting the app.

	- MaterialApp: This is a widget that wraps a number of widgets that are commonly required for Material Design applications. It is the top-level widget in your 		Flutter application, providing various configurations and the navigation setup.

	- home: This is a property of the MaterialApp widget. It defines the widget that will be displayed as the default route of the app, essentially the "home page" of 	the application.

	- Text: This is a widget that displays a string of text with a single style. It is used to show simple text content.

	- const helps Dart optimize runtime performence.

	- Dart is type-safe language.
	- Dart is Object-Oriented Language.
	

